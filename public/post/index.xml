<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My DataScience Blog</title>
    <link>/post/</link>
    <description>Recent content in Posts on My DataScience Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ubuntu rstudio 한글입력문제 해결하는 방법</title>
      <link>/2020/06/23/ubuntu-rstudio-%ED%95%9C%EA%B8%80%EC%9E%85%EB%A0%A5%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/06/23/ubuntu-rstudio-%ED%95%9C%EA%B8%80%EC%9E%85%EB%A0%A5%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95/</guid>
      <description>우분투 환경에서 rstudio를 설치하고 코딩간에 한글을 입력할 때 백스테이스를 누르면 &amp;lsquo;(&amp;rsquo; 문자들이 등장하고 잘못 입력한 글을 지울 수 없어 난감했었는데 오늘 이 문제를 해결해서 망각하지 않도록 적어놓으려고 합니다.
해결방법은 다음의 주소에서 찾았습니다.
https://support.rstudio.com/hc/en-us/articles/205605748-Using-RStudio-0-99-with-Fctix-on-Linux
이 해결방법은 일본인이 작성한 글을 이용해 적은 것인데 다음의 블로그를 통해 해결 방법을 적어놓았더군요. 전 일본어는 영 몰라서 그냥 참고만 했습니다.
https://blog.goo.ne.jp/ikunya/e/ca6fd08bb8f304ccb90362b7d78b560c
가장 중요한 부분은 다음의 코드를 우분투 터미널에 입력하는 것인데 본인의 시스템 아키텍쳐에 따라 $(dpkg-architecture -qDEB_BUILD_MULTIARCH) 부분에 들어갈 단어와 코드 뒷부분에 잇는 /usr/lib/rstudio/bin/plugins/platforminputcontexts/ 경로가 상이할 수 있습니다.</description>
    </item>
    
    <item>
      <title>Adult Census Income Dataset EDA 1 (Part1)</title>
      <link>/2020/05/18/adult-census-income-dataset-eda-1-part1/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/05/18/adult-census-income-dataset-eda-1-part1/</guid>
      <description>Data Loading  이번 포스트에서는 Adult 라는 데이터에 대해 탐험해보려 합니다. 왜 EDA를 하려고 하냐면 이 데이터를 가지고 추후 로지스틱 회귀분석을 해 보려 하기 때문입니다. 이 Adult 데이터는 인구통계학적으로 수입에 대한 주제를 고찰해 볼 수 있는 데이터입니다. Adult Census Income 데이터라고도 합니다.
 먼저 데이터를 받으셔야 합니다. 항상 분석의 첫 단계는 데이터를 수집하는 일입니다. 그런데 이것이 실무에선 여간 만만한 일이 아닙니다. 대부분 분석을 위한 데이터들은 보안이라는 벽 때문에 직접 접근이 어렵고 막상 수많은 행정절차를 걸쳐 데이터를 만질 수 있는 곳에 입성(?</description>
    </item>
    
    <item>
      <title>Adult Census Income Dataset EDA 2 (Part2)</title>
      <link>/2020/05/18/adult-census-income-dataset-eda-2-part2/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/05/18/adult-census-income-dataset-eda-2-part2/</guid>
      <description>Data Loading  먼저 데이터를 불러오겠습니다. 지난 번 포스트에서 전처리한 데이터를 사용합니다. 그 데이터는 adult_1.csv 파일에 저장되어 있습니다.
adult &amp;lt;- read_csv(&amp;#39;https://raw.githubusercontent.com/jakinpilla/first_blogdown/master/public/post/data/adult_1.csv&amp;#39;) # adult &amp;lt;- read_csv(&amp;#39;./data/adult_1.csv&amp;#39;) adult %&amp;gt;% glimpse() ## Observations: 32,561 ## Variables: 13 ## $ age &amp;lt;dbl&amp;gt; 39, 50, 38, 53, 28, 37, 49, 52, 31, 42, 37, 30, 23, ... ## $ workclass &amp;lt;chr&amp;gt; &amp;quot;State-gov&amp;quot;, &amp;quot;Self-emp-not-inc&amp;quot;, &amp;quot;Private&amp;quot;, &amp;quot;Private... ## $ education_num &amp;lt;dbl&amp;gt; 13, 13, 9, 7, 13, 14, 5, 9, 14, 13, 10, 13, 13, 12, .</description>
    </item>
    
    <item>
      <title>Logistic Regression with mlr3: Adult Dataset</title>
      <link>/2020/05/18/logistic-regression-with-mlr3-adult-dataset/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/05/18/logistic-regression-with-mlr3-adult-dataset/</guid>
      <description>library(mlr3) library(mlr3learners) library(mlr3viz) library(mlr3misc) library(R6) library(data.table) library(tidyverse)  이번 포스트에서는 mlr3라는 패키지를 통해 앞서 했었던 logistic regression을 반복해서 해 보려고 합니다. mlr3는 R6라는 객체지향 프로그래밍을 위한 R 패키지를 이용해 python의 scikit-learn 처럼 머신러닝을 할 수 있게 해 주는 현대적인 R 패키지입니다. 상당히 속도가 빠르고 통일된 학습 절차를 제공하고 있어 향후 R 언어의 ML을 위한 패키지로 각광받고 있습니다.
Data Loading 일단 데이터를 불러옵니다.
adult &amp;lt;- read_csv(&amp;#39;https://raw.githubusercontent.com/jakinpilla/first_blogdown/master/public/post/data/adult_1.csv&amp;#39;) adult %&amp;gt;% glimpse() ## Observations: 32,561 ## Variables: 13 ## $ age &amp;lt;dbl&amp;gt; 39, 50, 38, 53, 28, 37, 49, 52, 31, 42, 37, 30, 23, .</description>
    </item>
    
    <item>
      <title>Logistic Regression 예제: Adult Dataset</title>
      <link>/2020/05/18/logistic-regression-%EC%98%88%EC%A0%9C-adult-dataset/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/05/18/logistic-regression-%EC%98%88%EC%A0%9C-adult-dataset/</guid>
      <description>Data Loading &amp;amp; Spliting Data Loading  먼저 데이터를 불러오겠습니다. 지난 번 포스트에서 전처리한 데이터를 사용합니다. 그 데이터는 adult_1.csv 파일에 저장되어 있습니다.
adult &amp;lt;- read_csv(&amp;#39;https://raw.githubusercontent.com/jakinpilla/first_blogdown/master/public/post/data/adult_1.csv&amp;#39;) # adult &amp;lt;- read_csv(&amp;#39;./data/adult_1.csv&amp;#39;) adult %&amp;gt;% glimpse() ## Observations: 32,561 ## Variables: 13 ## $ age &amp;lt;dbl&amp;gt; 39, 50, 38, 53, 28, 37, 49, 52, 31, 42, 37, 30, 23, ... ## $ workclass &amp;lt;chr&amp;gt; &amp;quot;State-gov&amp;quot;, &amp;quot;Self-emp-not-inc&amp;quot;, &amp;quot;Private&amp;quot;, &amp;quot;Private.</description>
    </item>
    
    <item>
      <title>SVM theory Part1</title>
      <link>/2020/05/18/svm-theory-part1/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/05/18/svm-theory-part1/</guid>
      <description>library(e1071) library(tidyverse) library(plotly) Logistic Regression에서는 확률을 이용합니다. 바로 확률을 이용해서 Decision Boundary를 결정합니다. 그런데 Support Vector Machine은 확률을 이용하지 않습니다. 다른 방법으로 Decision Boudary를 설정합니다.
# create linear_plot_with_theta_delta() funcition # theata means a slope and delta means a margin # set seed set.seed(2020) n &amp;lt;- 50 df &amp;lt;- data.frame(x1 = runif(n), x2 = runif(n)) linear_plot_with_theta_delta &amp;lt;- function(theta, delta) { # Generate data frame with two uniformly distributed predictors lying between 0 and 1.</description>
    </item>
    
    <item>
      <title>로지스틱 회귀(Logistic Regression) 모형의 평가: 로그우도, 이탈도 등</title>
      <link>/2020/05/18/%EB%A1%9C%EC%A7%80%EC%8A%A4%ED%8B%B1-%ED%9A%8C%EA%B7%80logistic-regression-%EB%AA%A8%ED%98%95%EC%9D%98-%ED%8F%89%EA%B0%80-%EB%A1%9C%EA%B7%B8%EC%9A%B0%EB%8F%84-%EC%9D%B4%ED%83%88%EB%8F%84-%EB%93%B1/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/05/18/%EB%A1%9C%EC%A7%80%EC%8A%A4%ED%8B%B1-%ED%9A%8C%EA%B7%80logistic-regression-%EB%AA%A8%ED%98%95%EC%9D%98-%ED%8F%89%EA%B0%80-%EB%A1%9C%EA%B7%B8%EC%9A%B0%EB%8F%84-%EC%9D%B4%ED%83%88%EB%8F%84-%EB%93%B1/</guid>
      <description>로지스틱 회귀 모형의 평가: 로그 우도 통계량  로지스틱 회귀에서도 선형회귀에서와 마찬가지로 관측값과 예측값을 비교해서 모형의 적합도를 평가합니다. 이때 쓰이는 척도가 로그우도(log-likelihood)입니다. 로지스틱 회귀 모델에서 로그우도를 계산하는 식은 다음과 같습니다.
\[LL = \sum_{i=1}^{N} \left[ Y_{i} \ln(P(Y_{i})) + (1-Y_{i})\ln(1 - P(Y_{i})) \right]\]
 머신러닝 학습을 하게 되면 우도라는 말이 자주 등장합니다. 그리고 그와 함께 따라 다니는 개념이 최대우도추정(Maximum Likelihood Estimation)입니다. 우도와 최대우도추정을 이번 포스트에서 모두 다루기는 어렵습니다.</description>
    </item>
    
    <item>
      <title>로지스틱 회귀(Logistic Regression)의 기본 원리</title>
      <link>/2020/05/18/%EB%A1%9C%EC%A7%80%EC%8A%A4%ED%8B%B1-%ED%9A%8C%EA%B7%80logistic-regression%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EC%9B%90%EB%A6%AC/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/05/18/%EB%A1%9C%EC%A7%80%EC%8A%A4%ED%8B%B1-%ED%9A%8C%EA%B7%80logistic-regression%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EC%9B%90%EB%A6%AC/</guid>
      <description>로지스틱 회귀란?  로지스틱 회귀는 결과변수가 범주형 변수이고 예측변수들이 연속변수 또는 범주형 변수인 회귀분석 모형입니다. 보통 머신러닝에서 분류(Classification)을 위해 가장 기본이 되는 모형으로 사용됩니다. 이 때 결과변수가 두 가지일(0 &amp;amp; 1, False &amp;amp; True, Neg &amp;amp; Pos 등) 경우 Binary Logistic Regression라 하고, 결과변수가 셋 이상일 경우 Multinomial Logistic Regression 이라고 합니다.
 로지스틱 회귀의 원리  예측변수가 \(X_{1i}\) 하나 뿐인 가장 단순한 경우에, Y가 1이 될(혹은 True, Pos 등, 상대적으로 관심이 있어 예측을 하고 싶은 대상을 1로 둡니다.</description>
    </item>
    
  </channel>
</rss>
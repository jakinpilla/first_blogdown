mutate(total = rowSums(.)) %>%
mutate_if(is.numeric, list(~round(./total, 2))) -> msg.inst.prop
df.user_id %>%
bind_cols(msg.inst.prop) -> msg.inst.prop_1
msg.inst.prop_1 %>% head
msg.inst.2_1 %>%
select(-user_id) %>%
prcomp(scale = T) -> pr_msg.inst
pr_msg.inst$x %>% as_tibble() -> pr_msg.inst_1
df.user_id %>%
bind_cols(pr_msg.inst_1) -> pr_msg.inst_2
pr_msg.inst_2 %>% head
hlp %>%
inner_join(install, by = 'user_id', suffix = c('', '.inst')) -> hlp.inst
# 메세지 행동일과 이용시작일의 차이 즉 경과일수를 구합니다.
hlp.inst %>%
mutate(log_date = as.Date(log_date),
log_date.inst = as.Date(log_date.inst)) %>%
mutate(elapsed_days = as.numeric(log_date - log_date.inst)) -> hlp.inst.1
# 경과일수가 1주 이내인 것만 추출합니다.
hlp.inst.1 %>%
filter(elapsed_days >= 0 & elapsed_days <= 6) -> hlp.inst.2
# 경과일수별 메세지 행동횟수가 열에 오도록 데이터를 배치합니다.
hlp.inst.2 %>%
mutate(elapsed_days = paste0('d', as.character(elapsed_days))) %>%
select(user_id, count, elapsed_days) %>%
group_by(user_id, elapsed_days) %>%
summarise(sum.count = sum(count)) %>%
ungroup() %>%
spread(elapsed_days, sum.count) %>%
replace(is.na(.), 0) -> hlp.inst.2_1
hlp.inst.2_1 %>% head
# 비율 데이터를 작성합니다.
hlp.inst.2_1 %>%
select(user_id) -> df.user_id
hlp.inst.2_1 %>%
select(-user_id) %>%
mutate(total = rowSums(.)) %>%
mutate_if(is.numeric, list(~round(./total, 2))) -> hlp.inst.prop
df.user_id %>%
bind_cols(hlp.inst.prop) -> hlp.inst.prop_1
hlp.inst.prop_1 %>% head
hlp.inst.2_1 %>%
select(-user_id) %>%
prcomp(scale = T) -> pr_hlp.inst
pr_hlp.inst$x %>% as_tibble() -> pr_hlp.inst_1
df.user_id %>%
bind_cols(pr_hlp.inst_1) -> pr_hlp.inst_2
pr_hlp.inst_2 %>% head
library(foreach)
# 클러스터 데이터 작성 함수
createClusterData <- function(aname, x, x.prop, x.pca) {
set.seed(2019)
df <- ldply(foreach(i = 3:6, combine = rbind) %do% {
km <- kmeans(x[, -1], i)
km.prop <- kmeans(x.prop[, -1], i)
km.pca <- kmeans(x.pca[, -1], i)
data.frame(user_id = x$user_id,
cluster.type = sprintf('%s%02d', aname, i),
freq.cluster.id = km$cluster,
prop.cluster.id = km.prop$cluster,
pca.cluster.id = km.pca$cluster
)
})
cluster.melt <- melt(df, id.vars = c('user_id', 'cluster.type'))
dcast(cluster.melt, user_id ~ cluster.type + variable)
}
battle.cluster <- createClusterData('battle', battle.inst.2_1, battle.inst.prop_1, pr_battle.inst_2)
battle.cluster %>% head
msg.cluster <- createClusterData('msg', msg.inst.2_1, msg.inst.prop_1, pr_msg.inst_2)
msg.cluster %>% head
hlp.cluster <- createClusterData('hlp', hlp.inst.2_1, hlp.inst.prop_1, pr_hlp.inst_2)
hlp.cluster %>% head
target.install.login.ds %>%
left_join(battle.cluster, by = 'user_id') %>%
left_join(msg.cluster, by = 'user_id') %>%
left_join(hlp.cluster, by = 'user_id') %>%
replace(is.na(.), 0) -> cluster.data
cluster.data %>% head
cluster.data %>% head
cluster.data %>%
dplyr::select(-log_date, -install_time, -gender, -generation, -device_type) %>%
gather(variable, value, -user_id, -density) -> cluster.data.gathered
cluster.data.gathered %>% head
cluster.data.gathered %>%
group_by(variable, value) %>%
summarise(avg.density = mean(density)) -> cluster.data.avg
cluster.data.avg %>% head()
# 새로운 클러스터 번호  부여
cluster.data.avg %>%
arrange(variable, avg.density) %>%
group_by(variable) %>%
mutate(value2 = sort(value)) -> cluster.data.avg_1
cluster.data.avg_1 %>% head()
cluster.data.gathered %>%
inner_join(cluster.data.avg_1, by = c('variable', 'value')) -> cluster.data.gathered_1
cluster.data.gathered_1 %>%
select(user_id, density, variable, value2) %>%
spread(variable, value2) -> cluster.data_1
cluster.data_1 %>% head()
library(rpart)
fit <- rpart(density ~ ., cluster.data_1[, -1])
print(fit)
library(rpart.plot)
rpart.plot(fit)
cluster.data.gathered_1 %>%
filter(variable == 'hlp04_pca.cluster.id') %>%
select(user_id, avg.density, value2) %>%
rename(cluster = value2) -> cluster.data_2
cluster.data_2 %>% head
hlp.inst.prop_1 %>%
inner_join(cluster.data_2, by = 'user_id') %>%
count(cluster)
library(rpart)
fit <- rpart(density ~ ., cluster.data_1[, -1])
print(fit)
cluster.data %>%
dplyr::select(-log_date, -install_time, -gender, -generation, -device_type) %>%
gather(variable, value, -user_id, -density) -> cluster.data.gathered
cluster.data.gathered %>% head
df_1 <- data.frame(start = c(60000, 34000000),
end = c(3300000, 67980000809))
df_1
df_2 <- data.frame(start = c(4000, 100000, 70000, 34000001),
end = c(200000, 599099, 900020, 460000000))
source('~/.active-rstudio-document', echo=TRUE)
df_2 %>%
rename(start_1 = start,
end_1  = end)
df_2 %>%
rename(start_1 = start,
end_1  = end) -> df)2
df_2 %>%
rename(start_1 = start,
end_1  = end) -> ddf_2
df_1 %>%
bind_cols(df_1)
df_1 %>%
bind_rows(df_1)
df_2 %>%
rename(start_1 = start,
end_1  = end) -> df_2_1
df_1 %>%
bind_rows(df_1)  %>%
bind_cols(df_2_1)
start <= start_1 & end >= end_1, "O", "X")
df_1 %>%
df_1 %>%
df_1 %>%
bind_rows(df_1)  %>%
bind_cols(df_2_1) %>%
mutate(is_in_range = case_when(
start <= start_1 & end >= end_1, "O", "X"))
df_1 %>%
bind_rows(df_1)  %>%
bind_cols(df_2_1) %>%
mutate(is_in_range = case_when(
(start <= start_1 & end >= end_1), "O", "X"))
df_1 %>%
bind_rows(df_1)  %>%
bind_cols(df_2_1) %>%
mutate(is_in_range = case_when(
(start <= start_1 & end >= end_1) ~ "O"
TRUE ~ "X"))
df_1 %>%
bind_rows(df_1)  %>%
bind_cols(df_2_1) %>%
mutate(is_in_range = case_when(
(start <= start_1 & end >= end_1) ~ "O",
TRUE ~ "X"))
df_1 %>%
bind_rows(df_1)  %>%
bind_cols(df_2_1) %>%
mutate(is_in_range = case_when(
start <= start_1 & end >= end_1 ~ "O",
TRUE ~ "X"))
library(tidyverse)
df_1 <- data.frame(start = c(60000, 34000000),
end = c(3300000, 67980000809))
df_2 <- data.frame(start = c(4000, 100000, 70000, 34000001),
end = c(200000, 599099, 900020, 460000000))
# 이름의 중복을 피하기 위해 변수병을 변환("_1"을 붙여봄)
df_2 %>%
rename(start_1 = start,
end_1  = end) -> df_2_1
# 각 행마다 해당하는 조건을 대응시키기 위해 두 데이터 프레임의 행의 수를 같게 함.
df_1 %>%
bind_rows(df_1) -> df_1_1
df_1_1 %>%
bind_cols(df_2_1) %>%
mutate(is_in_range = case_when(
start <= start_1 & end >= end_1 ~ "O",
TRUE ~ "X"))
setwd("~/first_blogdown")
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", message=F, warning=F, cache = T)
blogdown:::serve_site()
df_tmp_1000 %>%
select(wage, marital_status, occupation, race, sex) %>%
mutate(wage = ifelse(wage == 0, "<=50K", ">50K"))
library(ez)
library(ggplot2)
library(nlme)
library(pastecs)
library(reshape2)
library(WRS)
library(clinfun)
library(pgirmess)
library(car)
library(tidyverse)
# install.packages('mvoutlier')
library(mvoutlier)
library(gmodels)
library(MASS)
library(nlme) # 다층모형을 위해
library(QuantPsyc)
library(boot)
# install.packages('epiDisplay')
library(epiDisplay)
library(knitr)
# install.packages('mlogit')
library(mlogit)
library(plotly)
library(curl)
library(gridExtra)
library(GGally)
adult <- read_csv('./data/adult_1.csv')
adult %>% glimpse()
adult$relationship %>% unique()
adult %>%
count(relationship, wage) %>%
ggplot(aes(relationship, n, fill = wage)) +
geom_bar(stat = 'identity') +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
ylab("Persons") +
theme_minimal() +
theme(axis.title.y = element_blank()) +
coord_flip() -> p; ggplotly(p)
adult %>%
count(relationship, wage) %>%
group_by(relationship) %>%
mutate(total_each_n = sum(n)) %>%
mutate(ratio_each_wage = round(n / total_each_n*100, 1)) -> df_tmp
df_tmp %>%
ggplot(aes(relationship, n, fill = wage)) +
geom_bar(stat = 'identity', position = 'fill') +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
ylab("Ratio") +
theme_minimal() +
theme(axis.title.y = element_blank()) +
coord_flip() -> p; ggplotly(p)
adult$race %>% unique()
adult %>%
count(race, wage) %>%
ggplot(aes(race, n, fill = wage)) +
geom_bar(stat = 'identity') +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
ylab("Persons") +
theme_minimal() +
theme(axis.title.y = element_blank()) +
coord_flip() -> p; ggplotly(p)
adult %>%
count(race, wage) %>%
group_by(race) %>%
mutate(total_each_n = sum(n)) %>%
mutate(ratio_each_wage = round(n / total_each_n*100, 1)) -> df_tmp
df_tmp %>%
ggplot(aes(race, n, fill = wage)) +
geom_bar(stat = 'identity', position = 'fill') +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
ylab("Ratio") +
theme_minimal() +
theme(axis.title.y = element_blank()) +
coord_flip() -> p; ggplotly(p)
adult %>%
count(sex) %>%
ggplot(aes(sex, n)) +
geom_bar(stat  = 'identity', fill = 'steelblue') +
theme(axis.title.y =element_blank(),
axis.title.x = element_blank()) -> p1
adult %>%
count(sex, wage) %>%
ggplot(aes(sex, n, fill = wage)) +
geom_bar(stat = 'identity') +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme(axis.title.y =element_blank(),
axis.title.x = element_blank()) +
theme_minimal() +
theme(legend.position = "none") +
theme(axis.title.y =element_blank(),
axis.title.x = element_blank()) -> p2
adult %>%
count(sex, wage) %>%
ggplot(aes(sex, n, fill = wage)) +
geom_bar(stat = 'identity', position = 'fill') +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal() +
theme(axis.title.y =element_blank(),
axis.title.x = element_blank()) -> p3
grid.arrange(p2, p3, ncol = 2, widths = c(.43, .55))
adult %>%
filter(race %in% c('White', 'Black')) %>%
ggplot(aes(age, fill = wage)) +
geom_density(alpha = .5) +
facet_grid(race ~ sex) +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal() -> p; p
adult %>%
ggplot(aes(x = wage, y = capital_gain, color = wage)) +
geom_boxplot() +
geom_jitter(alpha = .3) +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'colour') +
theme_minimal() +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
theme(legend.position = "none") -> p1; p1
adult %>%
ggplot(aes(capital_gain, fill = wage)) +
geom_histogram() +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal() -> p2;
adult %>%
ggplot(aes(capital_gain, fill = wage)) +
geom_histogram() +
scale_x_log10() +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal() -> p3;
adult %>%
ggplot(aes(capital_gain, fill = wage)) +
geom_density(alpha = .5) +
scale_x_log10() +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal() -> p4;
grid.arrange(p2, p3, p4, ncol = 1)
vec_wage <- ifelse(adult$wage == "<=50K", 0, 1)
cor(vec_wage, adult$capital_gain)
adult %>%
ggplot(aes(x = wage, y = capital_loss, color = wage)) +
geom_boxplot() +
geom_jitter(alpha = .3) +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'colour') +
theme_minimal() +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
theme(legend.position = "none") -> p1; p1
adult %>%
ggplot(aes(capital_loss, fill = wage)) +
geom_histogram() +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal() -> p2;
adult %>%
ggplot(aes(capital_loss, fill = wage)) +
geom_histogram() +
scale_x_log10() +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal() -> p3;
adult %>%
ggplot(aes(capital_loss, fill = wage)) +
geom_density(alpha = .5) +
scale_x_log10() +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal() -> p4;
grid.arrange(p2, p3, p4, ncol = 1)
adult$hours_per_week %>% range()
adult %>%
ggplot(aes(x = wage, y = hours_per_week, color = wage)) +
geom_jitter(alpha = .3) +
geom_boxplot(alpha = .5) +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'colour') +
theme_minimal() +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
theme(legend.position = "none") -> p1; p1
adult %>%
ggplot(aes(hours_per_week, fill = wage)) +
geom_histogram() +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal() -> p2; p2
adult %>%
ggplot(aes(hours_per_week, fill = wage)) +
geom_density(alpha = .5) +
# scale_x_log10() +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal() -> p; p
adult %>%
ggplot(aes(hours_per_week, fill = wage)) +
geom_density(alpha = .5) +
# scale_x_log10() +
facet_wrap(~sex) +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal() -> p; p
adult$native_country %>% unique()
adult %>%
count(native_country, wage) %>%
group_by(native_country) %>%
mutate(total_each_n = sum(n)) %>%
mutate(ratio_each_edu_wage = round(n / total_each_n*100, 1)) -> df_tmp
df_tmp %>%
filter(wage == ">50K") %>%
arrange(desc(ratio_each_edu_wage)) %>% pull(native_country) -> x_axis_order
df_tmp %>%
ungroup() %>%
mutate(native_country = factor(native_country, levels = x_axis_order, labels = x_axis_order)) %>%
filter(!is.na(native_country)) %>%
filter(native_country != "?") -> df_tmp_1
df_tmp_1 %>%
ggplot(aes(native_country, n, fill = wage)) +
geom_bar(stat = 'identity', position = 'fill') +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
ylab("Ratio") +
theme_minimal() +
coord_flip() -> p; p
adult %>% head
select_if(adult, is.numeric) -> df_1 # 연속형 변수를 가진 데이터만 선택
adult %>%
select(wage, marital_status, occupation, race, sex) %>%
bind_cols(df_1) %>%
mutate(wage = ifelse(wage == "<=50K", 0, 1)) -> df_tmp
set.seed(2020)
df_tmp %>%
sample_n(1000) -> df_tmp_1000
df_tmp_1000 %>%
ggpairs() -> p
p
select_if(df_tmp_1000, is.numeric) %>%
ggpairs() +
theme_minimal()
df_tmp_1000 %>%
select(wage, marital_status, occupation, race, sex) %>%
mutate(wage = ifelse(wage == 0, "<=50K", ">50K"))
df_tmp_1000_fctr_1 %>%
ggpairs() +
theme_minimal()
df_tmp_1000 %>%
select(wage, marital_status, occupation, race, sex) %>%
mutate(wage = ifelse(wage == 0, "<=50K", ">50K")) -> df_tmp_1000_fctr_1
df_tmp_1000_fctr_1 %>%
ggpairs() +
theme_minimal()
df_tmp_1000_fctr_1 %>%
ggpairs(mapping = aes(color = wage)) +
theme_minimal()
ggpairs(df_tmp_1000_fctr_1[, c(1, 2)], mapping = aes(color = wage)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45))
blogdown:::serve_site()
p +
theme(axix.text.x = element_text(angle = 45))
p +
theme(axis.text.x = element_text(angle = 45))
select_if(df_tmp_1000, is.numeric) %>%
ggpairs() +
theme_minimal() +
theme(axix.text.x = element_text(angle = 45))
select_if(df_tmp_1000, is.numeric) %>%
ggpairs() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45))
df_tmp_1000_fctr_1 %>%
ggpairs(mapping = aes(color = wage)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45))
ggpairs(df_tmp_1000_fctr_1[, c(1, 2)], mapping = aes(color = wage)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45))
ggpairs(df_tmp_1000_fctr_1[, c(1, 2)], mapping = aes(color = wage)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45)) -> p_mat; p_mat
p_mat[2, 1]
p_mat[1, 2]
select_if(adult, is.numeric) -> df_1 # 연속형 변수를 가진 데이터만 선택
adult %>%
select(wage, marital_status, occupation, race, sex) %>%
bind_cols(df_1) %>%
mutate(wage = ifelse(wage == "<=50K", 0, 1)) -> df_tmp
set.seed(2020)
df_tmp %>%
sample_n(1000) -> df_tmp_1000
df_tmp_1000 %>%
ggpairs(mapping = aes(color = wage)) -> p
p +
theme(axis.text.x = element_text(angle = 45))
select_if(adult, is.numeric) -> df_1 # 연속형 변수를 가진 데이터만 선택
adult %>%
select(wage, marital_status, occupation, race, sex) %>%
bind_cols(df_1) %>%
mutate(wage = ifelse(wage == "<=50K", 0, 1)) -> df_tmp
set.seed(2020)
df_tmp %>%
sample_n(1000) -> df_tmp_1000
df_tmp_1000 %>%
ggpairs() -> p
p +
theme(axis.text.x = element_text(angle = 45))
select_if(df_tmp_1000, is.numeric) %>%
ggpairs() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45))
df_tmp_1000 %>%
select(wage, marital_status, occupation, race, sex) %>%
mutate(wage = ifelse(wage == 0, "<=50K", ">50K")) -> df_tmp_1000_fctr_1
df_tmp_1000_fctr_1 %>%
ggpairs(mapping = aes(color = wage)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45))
ggpairs(df_tmp_1000_fctr_1[, c(1, 2)], mapping = aes(color = wage)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45)) -> p_mat; p_mat
p_mat[2, 1]
p_mat[1, 2]

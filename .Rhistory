count(sex, wage) %>%
ggplot(aes(sex, n, fill = wage)) +
geom_bar(stat = 'identity') +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme(axis.title.y =element_blank(),
axis.title.x = element_blank()) +
theme_minimal() +
theme(legend.position = "none") +
theme(axis.title.y =element_blank(),
axis.title.x = element_blank()) -> p2
adult %>%
count(sex, wage) %>%
ggplot(aes(sex, n, fill = wage)) +
geom_bar(stat = 'identity', position = 'fill') +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal() +
theme(axis.title.y =element_blank(),
axis.title.x = element_blank()) -> p3
grid.arrange(p2, p3, ncol = 2, widths = c(.43, .55))
adult %>%
filter(race %in% c('White', 'Black')) %>%
ggplot(aes(age, fill = wage)) +
geom_density(alpha = .5) +
facet_grid(race ~ sex) +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal() -> p; p
adult %>%
ggplot(aes(x = wage, y = capital_gain, color = wage)) +
geom_boxplot() +
geom_jitter(alpha = .3) +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'colour') +
theme_minimal() +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
theme(legend.position = "none") -> p1; p1
adult %>%
ggplot(aes(capital_gain, fill = wage)) +
geom_histogram() +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal() -> p2;
adult %>%
ggplot(aes(capital_gain, fill = wage)) +
geom_histogram() +
scale_x_log10() +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal() -> p3;
adult %>%
ggplot(aes(capital_gain, fill = wage)) +
geom_density(alpha = .5) +
scale_x_log10() +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal() -> p4;
grid.arrange(p2, p3, p4, ncol = 1)
vec_wage <- ifelse(adult$wage == "<=50K", 0, 1)
cor(vec_wage, adult$capital_gain)
adult %>%
ggplot(aes(x = wage, y = capital_loss, color = wage)) +
geom_boxplot() +
geom_jitter(alpha = .3) +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'colour') +
theme_minimal() +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
theme(legend.position = "none") -> p1; p1
adult %>%
ggplot(aes(capital_loss, fill = wage)) +
geom_histogram() +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal() -> p2;
adult %>%
ggplot(aes(capital_loss, fill = wage)) +
geom_histogram() +
scale_x_log10() +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal() -> p3;
adult %>%
ggplot(aes(capital_loss, fill = wage)) +
geom_density(alpha = .5) +
scale_x_log10() +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal() -> p4;
grid.arrange(p2, p3, p4, ncol = 1)
adult$hours_per_week %>% range()
adult %>%
ggplot(aes(x = wage, y = hours_per_week, color = wage)) +
geom_jitter(alpha = .3) +
geom_boxplot(alpha = .5) +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'colour') +
theme_minimal() +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
theme(legend.position = "none") -> p1; p1
adult %>%
ggplot(aes(hours_per_week, fill = wage)) +
geom_histogram() +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal() -> p2; p2
adult %>%
ggplot(aes(hours_per_week, fill = wage)) +
geom_density(alpha = .5) +
# scale_x_log10() +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal() -> p; p
adult %>%
ggplot(aes(hours_per_week, fill = wage)) +
geom_density(alpha = .5) +
# scale_x_log10() +
facet_wrap(~sex) +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal() -> p; p
adult$native_country %>% unique()
adult %>%
count(native_country, wage) %>%
group_by(native_country) %>%
mutate(total_each_n = sum(n)) %>%
mutate(ratio_each_edu_wage = round(n / total_each_n*100, 1)) -> df_tmp
df_tmp %>%
filter(wage == ">50K") %>%
arrange(desc(ratio_each_edu_wage)) %>% pull(native_country) -> x_axis_order
df_tmp %>%
ungroup() %>%
mutate(native_country = factor(native_country, levels = x_axis_order, labels = x_axis_order)) %>%
filter(!is.na(native_country)) %>%
filter(native_country != "?") -> df_tmp_1
df_tmp_1 %>%
ggplot(aes(native_country, n, fill = wage)) +
geom_bar(stat = 'identity', position = 'fill') +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
ylab("Ratio") +
theme_minimal() +
coord_flip() -> p; p
adult %>% head
select_if(adult, is.numeric) -> df_1 # 연속형 변수를 가진 데이터만 선택
adult %>%
select(wage, marital_status, occupation, race, sex) %>%
bind_cols(df_1) %>%
mutate(wage = ifelse(wage == "<=50K", 0, 1)) -> df_tmp
set.seed(2020)
df_tmp %>%
sample_n(1000) -> df_tmp_1000
df_tmp_1000 %>%
ggpairs() -> p
p +
theme(axis.text.x = element_text(angle = 45))
select_if(df_tmp_1000, is.numeric) %>%
ggpairs() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45))
df_tmp_1000 %>%
select(wage, marital_status, occupation, race, sex) %>%
mutate(wage = ifelse(wage == 0, "<=50K", ">50K")) -> df_tmp_1000_fctr_1
df_tmp_1000_fctr_1 %>%
ggpairs(mapping = aes(color = wage)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45))
ggpairs(df_tmp_1000_fctr_1[, c(1, 2)], mapping = aes(color = wage)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45)) -> p_mat; p_mat
p_mat[2, 1]
p_mat[1, 2]
adult <- read_csv('https://raw.githubusercontent.com/jakinpilla/first_blogdown/master/public/post/data/adult_1.csv')
# adult <- read_csv('./data/adult_1.csv')
adult %>% glimpse()
adult %>%
count(wage)
adult %>%
count(wage) %>%
ggplot(aes(wage, n)) + geom_bar(stat = 'identity')
adult %>%
count(wage) %>%
ggplot(aes(wage, n)) + geom_bar(stat = 'identity') +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal()
adult %>%
count(wage) %>%
ggplot(aes(wage, n, fill = 'wagw')) + geom_bar(stat = 'identity') +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal()
adult %>%
count(wage) %>%
ggplot(aes(wage, n, fill = 'wage')) + geom_bar(stat = 'identity') +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal()
adult %>%
count(wage) %>%
ggplot(aes(wage, n)) + geom_bar(stat = 'identity') +
scale_fill_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal()
adult %>%
count(wage) %>%
ggplot(aes(wage, n)) + geom_bar(stat = 'identity') +
scale_color_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal()
adult %>%
count(wage) %>%
ggplot(aes(wage, n, fill = wage)) + geom_bar(stat = 'identity') +
scale_fill_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal()
adult %>%
count(wage)
adult %>%
count(wage) %>%
ggplot(aes(wage, n, fill = wage)) + geom_bar(stat = 'identity') +
scale_fill_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal()
library(caret)
adult
train_idx <- createDataPartition(adult$wage, p = .6, list = F)[, 1]
train_idx
set.seed(2020)
train_idx <- createDataPartition(adult$wage, p = .6, list = F)[, 1]
set.seed(2020)
df <- adult
train_idx <- createDataPartition(df$wage, p = .6, list = F)[, 1]
resid_idx <- setdiff(1:nrow(df), train_idx)
resid_df <- df[resid_idx, ]
val_idx <- createDataPartition(resid_df, p = .5, list = F)[, 1]
set.seed(2020)
df <- adult
train_idx <- createDataPartition(df$wage, p = .6, list = F)[, 1]
resid_idx <- setdiff(1:nrow(df), train_idx)
resid_df <- df[resid_idx, ]
val_idx <- createDataPartition(resid_df$wage, p = .5, list = F)[, 1]
test_idx <- setdiff(1:nrow(resid_df), val_idx)
train_data <- df[train_idx, ]
val_data <- resid_df[val_idx, ]
test_data <- test_idx[test_idx, ]
length(train_idx)
legnth(resid_idx)
length(resid_idx)
resid_df
val_idx <- createDataPartition(resid_df$wage, p = .5, list = F)[, 1]
val_idx
length(val_idx)
test_idx <- setdiff(1:nrow(resid_df), val_idx)
length(test_idx)
length(val_idx)
length(test_idx)
train_data <- df[train_idx, ]
dim(train_data)
val_data <- resid_df[val_idx, ]
dim(val_data)
dim(test_data)
test_data <- resid_df[test_idx, ]
dim(test_data)
set.seed(2020)
df <- adult
train_idx <- createDataPartition(df$wage, p = .6, list = F)[, 1]
resid_idx <- setdiff(1:nrow(df), train_idx)
resid_df <- df[resid_idx, ]
# length(train_idx)
# length(resid_idx)
val_idx <- createDataPartition(resid_df$wage, p = .5, list = F)[, 1]
# length(val_idx)
test_idx <- setdiff(1:nrow(resid_df), val_idx)
# length(test_idx)
train_data <- df[train_idx, ]
# dim(train_data)
val_data <- resid_df[val_idx, ]
# dim(val_data)
test_data <- resid_df[test_idx, ]
# dim(test_data)
train_data %>%
count(wage) %>%
ggplot(aes(wage, n, fill = wage)) + geom_bar(stat = 'identity') +
scale_fill_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal()
train_data %>% dim()
val_data %>%
count(wage) %>%
ggplot(aes(wage, n, fill = wage)) + geom_bar(stat = 'identity') +
scale_fill_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal()
test_data %>%
count(wage) %>%
ggplot(aes(wage, n, fill = wage)) + geom_bar(stat = 'identity') +
scale_fill_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal()
test_data %>% dim()
train_data %>%
mutate(wage = ifelse(wage == "<=50K", 0, 1))
train_data %>%
mutate(wage = ifelse(wage == "<=50K", 0, 1)) -> train_data_1
train_data_1 %>% kable()
train_data %>%
mutate(wage = ifelse(wage == "<=50K", 0, 1)) -> train_data_1
train_data_1 %>% head()
train_data %>%
mutate(wage = ifelse(wage == "<=50K", 0, 1)) -> train_data_1
train_data_1 %>% head() %>% kable()
library(DT)
train_data_1 %>% head() %>% DTdatatable()
train_data_1 %>% head() %>% DT::datatable()
train_data_1 %>% head() %>% DT::datatable(options = list(scrollx = T))
train_data_1 %>% head() %>% DT::datatable(options = list(scrollx = '500px'))
train_data_1 %>% head() %>% DT::datatable(options = list(scrollx = T))
train_data_1 %>% head() %>% DT::datatable(fillContainer = T)
train_data_1 %>% DT::datatable(fillContainer = T)
train_data %>%
mutate(wage = ifelse(wage == "<=50K", 0, 1)) -> train_data_1
DT::datatable(train_data_1,
options = list(
dom= 't',
scrollX = TRUE,
scrollCollapse = TRUE
))
train_data %>%
mutate(wage = ifelse(wage == "<=50K", 0, 1)) -> train_data_1
DT::datatable(train_data_1,
options = list(
scrollX = TRUE,
scrollCollapse = TRUE
))
train_data %>%
mutate(wage = ifelse(wage == "<=50K", 0, 1)) -> train_data_1
df <- train_data_1 %>% head(100)
DT::datatable(df,
options = list(
scrollX = TRUE,
scrollCollapse = TRUE
))
glm(wage ~ ., data = train_data, family = binomial)
glm(wage ~ ., data = train_data_1, family = binomial)
adult_logistic_m <- glm(wage ~ ., data = train_data_1, family = binomial)
adult_logistic_m %>% summary()
alias(adult_logistic_m)
adult_logistic_m <- glm(wage ~ ., data = train_data_1, family = binomial)
162500+52000
y_obs <- ifelse(val_data == "<=50K", 0, 1)
y_obs
y_obs <- ifelse(val_data$wage == "<=50K", 0, 1)
y_obs
yhat_logistic <- predict(adult_logistic_m, newdata = val_data, type = 'response')
y_obs <- ifelse(val_data$wage == "<=50K", 0, 1)
val_data %>%
select(-wage) -> val_data_1
yhat_logistic <- predict(adult_logistic_m, newdata = val_data_1, type = 'response')
y_obs <- ifelse(val_data$wage == "<=50K", 0, 1)
val_data %>%
select(-wage) -> val_data_1
yhat_logistic <- predict(adult_logistic_m, newdata = val_data_1, type = 'response')
val_data
yhat_logistic <- predict(adult_logistic_m, newdata = val_data_1, type = 'response')
val_data %>%
select(-wage) %>%
filter(native_country != 'Holand-Netherlands') -> val_data_1
yhat_logistic <- predict(adult_logistic_m, newdata = val_data_1, type = 'response')
yhat_logistic
y_obs <- ifelse(val_data$wage == "<=50K", 0, 1)
# val_data를 predict() 함수에 넣기 전에 다음과 같은 전처리가 필요합니다.
val_data %>%
select(-wage) %>%
filter(native_country != 'Holand-Netherlands') -> val_data_1
yhat_logistic <- predict(adult_logistic_m, newdata = val_data_1, type = 'response')
library(ROCR)
pred_logistic <- prediction(yhat_logistic, y_obs)
model.matrix(adult)
model.matrix(~ . -wage, adult )
model.matrix(~ . -wage, adult )
model.matrix(~ . -wage, adult ) %>%
as_tibble()
model.matrix(~ . -wage, adult ) %>%
as_tibble() -> df_1
adult %>%
select(wage)
adult %>%
select(wage) %>%
bind_cols(df_1)
adult %>%
select(wage) %>%
bind_cols(df_1) %>%
select(-`(Intercept)`)
adult %>%
select(wage) %>%
bind_cols(df_1) %>%
select(-`(Intercept)`) -> adult_mm
adult_mm %>%
count(wage) %>%
ggplot(aes(wage, n, fill = wage)) + geom_bar(stat = 'identity') +
scale_fill_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal()
set.seed(2020)
df <- adult_mm
train_idx <- createDataPartition(df$wage, p = .6, list = F)[, 1]
resid_idx <- setdiff(1:nrow(df), train_idx)
resid_df <- df[resid_idx, ]
# length(train_idx)
# length(resid_idx)
val_idx <- createDataPartition(resid_df$wage, p = .5, list = F)[, 1]
# length(val_idx)
test_idx <- setdiff(1:nrow(resid_df), val_idx)
# length(test_idx)
train_data <- df[train_idx, ]
# dim(train_data)
val_data <- resid_df[val_idx, ]
# dim(val_data)
test_data <- resid_df[test_idx, ]
# dim(test_data)
train_data %>%
count(wage) %>%
ggplot(aes(wage, n, fill = wage)) + geom_bar(stat = 'identity') +
scale_fill_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal()
train_data %>% dim()
val_data %>%
count(wage) %>%
ggplot(aes(wage, n, fill = wage)) + geom_bar(stat = 'identity') +
scale_fill_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal()
test_data %>%
count(wage) %>%
ggplot(aes(wage, n, fill = wage)) + geom_bar(stat = 'identity') +
scale_fill_manual(values = c('steelblue', 'red'), aesthetics = 'fill') +
theme_minimal()
test_data %>% dim()
train_data %>%
mutate(wage = ifelse(wage == "<=50K", 0, 1)) -> train_data_1
df <- train_data_1 %>% head(100)
DT::datatable(df,
options = list(
scrollX = TRUE,
scrollCollapse = TRUE
))
adult_logistic_m <- glm(wage ~ ., data = train_data_1, family = binomial)
summary(adult_logistic_m)
y_obs <- ifelse(val_data$wage == "<=50K", 0, 1)
# val_data를 predict() 함수에 넣기 전에 다음과 같은 전처리가 필요합니다.
val_data %>%
select(-wage) %>%
filter(native_country != 'Holand-Netherlands') -> val_data_1
y_obs <- ifelse(val_data$wage == "<=50K", 0, 1)
# val_data를 predict() 함수에 넣기 전에 다음과 같은 전처리가 필요합니다.
val_data %>%
select(-wage) -> val_data_1
yhat_logistic <- predict(adult_logistic_m, newdata = val_data_1, type = 'response')
yhat_logistic <- predict(adult_logistic_m, newdata = val_data_1, type = 'response')
pred_logistic <- prediction(yhat_logistic, y_obs)
perf_logistic <- performance(pred_logistic, measure = "tpr", x.measure = "fpr")
plot(perf_logistic)
perf_logistic
df_logistic %>% as_tibble()
df_logistic <- data.frame(FP = perf_logistic@x.values[[1]], TP = perf_logistic@y.values[[1]])
df_logistic %>% as_tibble()
ggplot() +
geom_line(data = df_logistic, aes(x = FP, y = TP, color = 'Logistic Regression')) +
ggplot() +
geom_line(data = df_logistic, aes(x = FP, y = TP, color = 'Logistic Regression'))
df_logistic %>% ggplot(aes(x = FP, y = TP)) + geom_line()
df_logistic %>% ggplot(aes(x = FPR, y = TPR)) + geom_line(color = 'blue')
pred_logistic <- prediction(yhat_logistic, y_obs)
perf_logistic <- performance(pred_logistic, measure = "tpr", x.measure = "fpr")
df_logistic <- data.frame(FPR = perf_logistic@x.values[[1]], TPR = perf_logistic@y.values[[1]])
df_logistic %>% as_tibble()
df_logistic %>% ggplot(aes(x = FPR, y = TPR)) + geom_line(color = 'blue')
df_logistic <- data.frame(FPR = perf_logistic@x.values[[1]], TPR = perf_logistic@y.values[[1]]) %>%
as_tibble()
df_logistic %>% ggplot(aes(x = FPR, y = TPR)) + geom_line(color = 'blue')
df_logistic %>% ggplot(aes(x = FPR, y = TPR)) +
geom_line(color = 'blue') +
theme_minimal()
theme_minimal()
pred_logistic <- prediction(yhat_logistic, y_obs)
perf_logistic <- performance(pred_logistic, measure = "tpr", x.measure = "fpr")
df_logistic <- data.frame(FPR = perf_logistic@x.values[[1]], TPR = perf_logistic@y.values[[1]]) %>%
as_tibble()
df_logistic %>% ggplot(aes(x = FPR, y = TPR)) +
geom_line(color = 'blue') +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1)) +
ggtitle('ROC Curve') +
labs(x = 'False Positive Rate', y = 'True Positive Rate')
theme_minimal()
pred_logistic <- prediction(yhat_logistic, y_obs)
perf_logistic <- performance(pred_logistic, measure = "tpr", x.measure = "fpr")
df_logistic <- data.frame(FPR = perf_logistic@x.values[[1]], TPR = perf_logistic@y.values[[1]]) %>%
as_tibble()
df_logistic %>% ggplot(aes(x = FPR, y = TPR)) +
geom_line(color = 'blue') +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1)) +
ggtitle('ROC Curve') +
labs(x = 'False Positive Rate', y = 'True Positive Rate')+
theme_minimal()
df_logistic <- data.frame(FPR = perf_logistic@x.values[[1]], TPR = perf_logistic@y.values[[1]]) %>%
as_tibble()
df_logistic %>% ggplot(aes(x = FPR, y = TPR)) +
geom_line(color = 'blue') +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1)) +
ggtitle('ROC Curve') +
labs(x = 'False Positive Rate', y = 'True Positive Rate') +
theme_minimal()
pred_logistic <- prediction(yhat_logistic, y_obs)
perf_logistic <- performance(pred_logistic, measure = "tpr", x.measure = "fpr")
df_logistic <- data.frame(FPR = perf_logistic@x.values[[1]], TPR = perf_logistic@y.values[[1]]) %>%
as_tibble()
df_logistic %>% ggplot(aes(x = FPR, y = TPR)) +
geom_line(color = 'blue') +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1)) +
ggtitle('ROC Curve') +
labs(x = 'False Positive Rate', y = 'True Positive Rate') +
theme_minimal()
performance(yhat_logistic, "auc")@y.values[[1]]
performance(pred_logistic, "auc")@y.values[[1]]
df_logistic <- data.frame(FPR = perf_logistic@x.values[[1]], TPR = perf_logistic@y.values[[1]]) %>%
as_tibble()
df_logistic %>% ggplot(aes(x = FPR, y = TPR)) +
geom_line(color = 'blue') +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1)) +
ggtitle('ROC Curve') +
labs(x = 'False Positive Rate', y = 'True Positive Rate') +
theme_minimal() -> p; ggplotly(p)
